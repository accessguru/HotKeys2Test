@using HotKeys2Test.Client.ShortcutKeys
@using Toolbelt.Blazor.HotKeys2
@inject ISprbrkHotKeys HotKeys
@implements IAsyncDisposable

<h3>Component 2</h3>

<div>Ctrl+A to Increment</div>
<div>Ctrl+D to Decrement</div>

<div class="mt-3">Current count: @_value</div>
<div>HotKeys: @_text</div>


@code {
    private int _value;
    private string? _text;
    private ISprbrkHotKeysContext? _sprbrkHotKeysContext;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _sprbrkHotKeysContext = HotKeys.CreateContext();
            await CreateHotKeys();
        }
    }

    private async Task CreateHotKeys()
    {
        await _sprbrkHotKeysContext!.AddAsync(ModKeys.Ctrl, Keys.A, Increment, "Ctrl+A pressed", ShortcutKeys.Exclude.None);
        await _sprbrkHotKeysContext.AddAsync(ModKeys.Ctrl, Keys.D, Decrement, "Ctrl+D pressed", ShortcutKeys.Exclude.None);
    }

    private void Increment(HotKeyEntry arg)
    {
        _text = arg.Description!;
        _value += 1;
        StateHasChanged();
    }

    private void Decrement(HotKeyEntry arg)
    {
        _text = arg.Description!;
        _value -= 1;
        StateHasChanged();
    }
    
    public async ValueTask DisposeAsync()
    {
        await _sprbrkHotKeysContext!.DisposeAsync();
    }

}